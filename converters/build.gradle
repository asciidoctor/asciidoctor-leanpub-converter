// ============================================================================
/*
 * Copyright 2013-2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ============================================================================


apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'de.marcphilipp.nexus-publish'

ext {

    dryRunPublications = project.hasProperty('dryRun') && project.dryRun.toBoolean()
    buildDateTime = new Date()
    (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')

    projectMeta = {
        resolveStrategy = groovy.lang.Closure.DELEGATE_FIRST
        name project.name
        description project.description
        url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter'
        inceptionYear '2015'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        issueManagement {
            system 'github'
            url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter/issues'
        }
        scm {
            url 'https://github.com/asciidoctor/asciidoctor-leanpub-converter'
        }
        developers {
            developer {
                id 'ysb33r'
                name 'Schalk W. Cronj√©'
                email 'ysb33r@gmail.com'
                timezone '1'
                roles {
                    role 'Project Lead'
                }
            }
            developer {
                id 'robertpanzer'
                name 'Robert Panzer'
                email 'robert.panzer.pb@gmail.com'
                timezone '1'
                roles {
                    role 'Contributor'
                }
            }
        }
    }

}


sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {

    api "org.asciidoctor:asciidoctorj:${asciidoctorjVersion}"
    implementation 'org.codehaus.groovy:groovy:2.4.15'
    implementation 'org.slf4j:slf4j-api:1.7.5'
//    implementation 'commons-io:commons-io:2.4'

    testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    testRuntimeOnly 'org.asciidoctor:asciidoctorj-diagram:1.5.16'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.5'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }

    systemProperties 'TESTROOT': file("${buildDir}/test/leanpub")
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId 'asciidoctor-leanpub-markdown'

            pom.withXml {
                asNode().children().last() + projectMeta
            }
        }
    }

    repositories {
        maven {
            name = "local"
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            if (project.hasProperty("sonatypeUsername")) {
                username = project.sonatypeUsername
            }
            if (project.hasProperty("sonatypePassword")) {
                password = project.sonatypePassword
            }
        }
    }
}

def hasSigningKey = project.hasProperty("signing.keyId") || project.findProperty("signingKey")
if(hasSigningKey && !project.hasProperty('skip.signing')) {
    apply plugin: 'signing'
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.maven
    }
}

jar {
    manifest {
        attributes 'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString(),
            'Build-Date': buildDateOnly,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'asciidoctor.org'
    }
}

ci {
    travisci {
        ext {
            travisPublishableRepo = System.getenv('TRAVIS_REPO_SLUG') == 'asciidoctor/asciidoctor-leanpub-converter' &&
                System.getenv('TRAVIS_JDK_VERSION') == 'oraclejdk8' &&
                System.getenv('TRAVIS_PULL_REQUEST') == 'false'

            travisAllowPublish = travisPublishableRepo && System.getenv('TRAVIS_BRANCH') == 'master'
            travisAllowDryRun = travisPublishableRepo && System.getenv('TRAVIS_BRANCH') != 'master'
        }

        task travisParams {
            doLast {
                ['TRAVIS_BRANCH', 'TRAVIS_REPO_SLUG', 'TRAVIS_PULL_REQUEST', 'TRAVIS_JDK_VERSION'].each {
                    println "${it}: ${System.getenv(it)}"
                }
                println "Allow publish: ${travisAllowPublish}"
                println "Allow dry run: ${travisAllowDryRun}"
            }
        }

        ['artifactoryPublish', 'bintrayUpload'].each {
            Task t = tasks.getByName(it)
            t.dependsOn travisParams
            t.enabled = travisAllowPublish || travisAllowDryRun
        }

        artifactory {
            publish {
                defaults {
                    publishBuildInfo = travisAllowDryRun
                    publishArtifacts = travisAllowDryRun
                    publishPom = travisAllowDryRun
                }
            }
        }
    }

}